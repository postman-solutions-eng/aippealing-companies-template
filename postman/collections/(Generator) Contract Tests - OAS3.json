{
	"info": {
		"_postman_id": "966e83e0-525a-41af-bb16-d476b063c0b4",
		"name": "(Generator) Contract Tests - OAS3",
		"description": "This collection will automatically generate a series of tests against an OpenAPI3 definition that is within your API Builder in Postman.\n\n## Getting Started\n\nRead the documentation on the [Contract Testing Public Workspace](https://postman.postman.co/workspace/0bc7d76d-b582-45ba-b216-5da2c1d174a0) to get started.\n\n## Running this collection\n\nFirstly, make sure you have set up your environment variables by forking [this environment](https://postman.postman.co/workspace/Contract-Test-Generator~0bc7d76d-b582-45ba-b216-5da2c1d174a0/environment/18354885-1125d62a-154a-45a6-8b04-73073e8e4d16). Once completed, this collection can be run using the Postman collection runner or from Newman.\n\n## Support\n\nThis collection is maintained in GitHub by the Postman Solutions Engineering team. Please post an issue directly in [this GitHub project](https://github.com/postman-solutions-eng/postman-contract-test-generator) if you need support.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "24483733-966e83e0-525a-41af-bb16-d476b063c0b4"
	},
	"item": [
		{
			"name": "API Validation",
			"item": [
				{
					"name": "Cleanup Previous Run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// See https://blog.postman.com/2019/05/28/pro-tip-dynamically-unset-postman-environment-variables/\r",
									"// for more details on what we're doing here. \r",
									"\r",
									"cleanupCollectionVariables();\r",
									"\r",
									"function cleanupCollectionVariables() {\r",
									"    const clean = _.keys(pm.collectionVariables.toObject());\r",
									"\r",
									"    _.each(clean, (arrItem) => {\r",
									"        pm.collectionVariables.unset(arrItem);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4e18c87b-9674-490f-81e0-59c177d80a3c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b6a487f6-2663-468e-a5b2-e8727c8edc0e"
							}
						}
					],
					"id": "73f5785a-9901-474a-9491-c44f7cd1c83f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initialize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const providedSchema = pm.environment.get('env-schema');\r",
									"if(providedSchema){\r",
									"    let success = true;\r",
									"    try{\r",
									"        const yaml = pm.environment.get('env-jsonToYaml');\r",
									"        (new Function(yaml))();\r",
									"\r",
									"        const schema = jsyaml.load(providedSchema);\r",
									"        pm.collectionVariables.set('coll-schema', JSON.stringify(schema));\r",
									"        postman.setNextRequest('Verify Component Adherence');\r",
									"    }\r",
									"    catch(err){\r",
									"        console.log(err);\r",
									"        success = false;\r",
									"        postman.setNextRequest(null);\r",
									"    }\r",
									"\r",
									"    pm.test('Successfully converted provided schema', function(){\r",
									"        pm.expect(success).to.be.true;\r",
									"    });    \r",
									"}"
								],
								"type": "text/javascript",
								"id": "ed1be583-cc7a-4eb6-a06f-e20eda43b880"
							}
						}
					],
					"id": "e4b3e5d8-dfe1-4033-8104-90e4ef806005",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate API In Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const minApiCount = Number(pm.environment.get('env-minApiCount'));\r",
									"const maxApiCount = Number(pm.environment.get('env-maxApiCount'));\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(`Workspace API count is between ${minApiCount} and ${maxApiCount}. (Count: ${jsonData.apis.length})`, function () {    \r",
									"    pm.expect(jsonData.apis.length).to.be.at.least(minApiCount);    \r",
									"    pm.expect(jsonData.apis.length).to.be.at.most(maxApiCount);\r",
									"});\r",
									"\r",
									"let apiIds = [];\r",
									"_.forEach(jsonData.apis, function(api){\r",
									"    apiIds.push(api.id);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('coll-apiIds', JSON.stringify(apiIds));"
								],
								"type": "text/javascript",
								"id": "0b42ee99-195b-4e79-952d-925700a4f6e9"
							}
						}
					],
					"id": "407b45cc-16e4-4a16-bca2-fdc18e3fd452",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{env-apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis?workspace={{env-workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{env-workspaceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current API Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('API has one or more versions', function(){\r",
									"    pm.expect(jsonData).to.have.property('versions').and.to.be.an('array');\r",
									"    pm.expect(jsonData.versions.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"const version = jsonData.versions[0];\r",
									"pm.collectionVariables.set('coll-versionId', version.id);"
								],
								"type": "text/javascript",
								"id": "a070f333-daad-4e3d-986f-5d219c776f80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let apiIds = pm.collectionVariables.get('coll-apiIds');\r",
									"if(apiIds){\r",
									"    apiIds = JSON.parse(apiIds);\r",
									"    const apiId = apiIds.pop();\r",
									"\r",
									"    pm.collectionVariables.set('coll-apiId', apiId);\r",
									"    pm.collectionVariables.set('coll-apiIds', JSON.stringify(apiIds));\r",
									"}\r",
									"else {\r",
									"    pm.request.url = 'https://postman-echo.com/delay/0'\r",
									"    pm.request.name = 'No APIs found in the workspace. Skipping execution';\r",
									"    postman.setNextRequest(null);\r",
									"}"
								],
								"type": "text/javascript",
								"id": "001a40ce-c198-4996-8c8a-61527bf62ce1"
							}
						}
					],
					"id": "a88a9aa4-2d4b-4a2f-81ae-e702e8e3d0df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{env-apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/:apiId/versions",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								":apiId",
								"versions"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "apiId",
									"value": "{{coll-apiId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current API Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test('Has schema for current version', function(){\r",
									"    pm.expect(jsonData).to.have.property('version');\r",
									"    pm.expect(jsonData.version).to.have.property('schema').and.to.be.an('array');\r",
									"    pm.expect(jsonData.version.schema.length).to.be.above(0);\r",
									"\r",
									"    pm.collectionVariables.set('coll-schemaId', jsonData.version.schema[0]);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b88604a4-28a3-4818-a210-1317c9e2c374"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f62e2684-18df-40ec-897a-d15573ad5863"
							}
						}
					],
					"id": "93ae6656-a0c0-48f4-9183-a4bb7b2e1bd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"type": "text",
								"value": "{{env-apiKey}}"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/:apiId/versions/:versionId",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								":apiId",
								"versions",
								":versionId"
							],
							"query": [
								{
									"key": null,
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "apiId",
									"value": "{{coll-apiId}}"
								},
								{
									"key": "versionId",
									"value": "{{coll-versionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcca4a31-86d4-4c11-84ec-128e9ec47261",
								"exec": [
									"try {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    if(jsonData.schema.language.toLowerCase() == 'json'){\r",
									"        pm.test('Schema is JSON', function(){\r",
									"            pm.expect(1).to.equal(1);\r",
									"            pm.collectionVariables.set('coll-schema', jsonData.schema.schema);\r",
									"        });\r",
									"    }\r",
									"    else {\r",
									"        pm.test('Schema translates to JSON', function(){\r",
									"            try{\r",
									"                const yaml = pm.environment.get('env-jsonToYaml');\r",
									"                (new Function(yaml))();\r",
									"\r",
									"                const schema = jsyaml.load(jsonData.schema.schema);\r",
									"                pm.collectionVariables.set('coll-schema', JSON.stringify(schema));\r",
									"                pm.expect(1).to.equal(1);\r",
									"            }\r",
									"            catch(err){\r",
									"                pm.expect(`${err.name} - ${err.message}`).to.equal(undefined);\r",
									"            }    \r",
									"        });\r",
									"    }\r",
									"}\r",
									"catch(err) {\r",
									"    console.log(err);\r",
									"    pm.test('Unable to load schema', function(){\r",
									"        pm.expect(0).to.equal(1);\r",
									"        postman.setNextRequest(null);\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0575b903-bad8-4ded-9237-461e28af21db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Key",
								"value": "{{env-apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/:apiId/versions/:apiVersionId/schemas/:schemaId",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								":apiId",
								"versions",
								":apiVersionId",
								"schemas",
								":schemaId"
							],
							"variable": [
								{
									"key": "apiId",
									"value": "{{coll-apiId}}"
								},
								{
									"key": "apiVersionId",
									"value": "{{coll-versionId}}"
								},
								{
									"key": "schemaId",
									"value": "{{coll-schemaId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API Base Url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4934ea96-bfc5-4776-afe6-b4e1a94dc1be",
								"exec": [
									"const schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"const server = pm.environment.get('env-server');\r",
									"\r",
									"pm.test('Environment has test server defined', function () {\r",
									"    pm.expect(server).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"pm.test('Schema has server/baseUrl defined', function () {\r",
									"    const servers = schema.servers;\r",
									"    pm.expect(servers).to.not.be.undefined;\r",
									"    const serverToTest = servers.find(s => s.url.toLowerCase() == server.toLowerCase());\r",
									"    pm.expect(serverToTest).to.not.be.undefined;\r",
									"\r",
									"    pm.expect(serverToTest).to.have.property('url');\r",
									"    pm.collectionVariables.set('coll-baseUrl', serverToTest.url);\r",
									"});\r",
									"\r",
									"const runComponentTests = pm.environment.get('env-runComponentTests') == 'true';\r",
									"if(!runComponentTests){   \r",
									"    const runContractTests = pm.environment.get('env-runContractTests') == 'true';\r",
									"    if(runContractTests){\r",
									"        postman.setNextRequest('Build Schema Tests');\r",
									"    } else {\r",
									"        postman.setNextRequest('More APIs to Process?');\r",
									"    }   \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b02c015d-cbf5-4ad7-96a1-15128d721c39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"id": "901cbede-0a81-4fdc-bfae-4699c5a91af9"
		},
		{
			"name": "Components",
			"item": [
				{
					"name": "Verify Component Adherence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"\r",
									"const requireParamDescription = Boolean(pm.environment.get('env-requireParamDescription'));\r",
									"const requireParamExample = Boolean(pm.environment.get('env-requireParamExample'));\r",
									"\r",
									"let paramDescriptionMinLength = pm.environment.get('env-paramDescriptionMinLength');\r",
									"if (paramDescriptionMinLength) {\r",
									"    paramDescriptionMinLength = Number(paramDescriptionMinLength);\r",
									"}\r",
									"\r",
									"let paramDescriptionMaxLength = pm.environment.get('env-paramDesciptionMaxLength');\r",
									"if (paramDescriptionMaxLength) {\r",
									"    paramDescriptionMaxLength = Number(paramDescriptionMaxLength);\r",
									"}\r",
									"\r",
									"var testedSchemaRefs = [];\r",
									"\r",
									"if (schema.components.parameters) {\r",
									"    for (let prop in schema.components.parameters) {\r",
									"        let parameter = schema.components.parameters[prop];\r",
									"\r",
									"        pm.test(`Parameter '${prop}' starts with a lowercase letter`, function () {\r",
									"            pm.expect(prop.charAt(0)).to.equal(prop.charAt(0).toLowerCase());\r",
									"        });\r",
									"\r",
									"        if (requireParamDescription) {\r",
									"            pm.test(`Parameter '${prop}' has a description between ${paramDescriptionMinLength} and ${paramDescriptionMaxLength} characters`, function () {\r",
									"                pm.expect(parameter).to.have.property('description').and.to.be.a('string');\r",
									"                pm.expect(parameter.description.length).to.be.at.least(paramDescriptionMinLength);\r",
									"                pm.expect(parameter.description.length).to.be.at.most(paramDescriptionMaxLength);\r",
									"            });\r",
									"        }\r",
									"\r",
									"        if (requireParamExample) {\r",
									"            pm.test(`Parameter '${prop}' has an example`, function () {\r",
									"                pm.expect(parameter).to.have.property('schema');\r",
									"                pm.expect(parameter.schema).to.have.property('example');\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"if (schema.components.schemas) {\r",
									"    for (let prop in schema.components.schemas) {\r",
									"        pm.test(`Schema '${prop}' begins with an uppercase letter`, function () {\r",
									"            pm.expect(prop.charAt(0)).to.equal(prop.charAt(0).toUpperCase());\r",
									"        });\r",
									"\r",
									"        const testedSchema = testedSchemaRefs.find(tsr => tsr == prop);\r",
									"        if (!testedSchema) {\r",
									"            const schemaObject = schema.components.schemas[prop];\r",
									"            testSchemaObject(schema, schemaObject, prop);\r",
									"            testedSchemaRefs.push(prop);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"if (schema.components.responses) {\r",
									"    for (let prop in schema.components.responses) {\r",
									"        pm.test(`Response '${prop}' begins with an uppercase letter`, function () {\r",
									"            pm.expect(prop.charAt(0)).to.equal(prop.charAt(0).toUpperCase());\r",
									"        });\r",
									"\r",
									"        if (requireParamDescription) {\r",
									"            const response = schema.components.responses[prop];\r",
									"            pm.test(`Response '${prop}' has a description between ${paramDescriptionMinLength} and ${paramDescriptionMaxLength} characters`, function () {\r",
									"                pm.expect(response).to.have.property('description').and.to.be.a('string');\r",
									"                pm.expect(response.description.length).to.be.at.least(paramDescriptionMinLength);\r",
									"                pm.expect(response.description.length).to.be.at.most(paramDescriptionMaxLength);\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"const runContractTests = pm.environment.get('env-runContractTests') == 'true';\r",
									"if (runContractTests) {\r",
									"    postman.setNextRequest('Build Schema Tests');\r",
									"} else {\r",
									"    postman.setNextRequest('More APIs to Process?');\r",
									"}\r",
									"\r",
									"\r",
									"function testSchemaObject(schema, object, objectName) {\r",
									"    if (object.type && object.type.toLowerCase() == 'object') {\r",
									"        if (object.required) {\r",
									"            for (let i = 0; i < object.required.length; i++) {\r",
									"                const requiredProp = object.required[i];\r",
									"                pm.test(`Schema '${objectName}' has required property '${requiredProp}' defined`, function () {\r",
									"                    pm.expect(object.properties).to.have.property(requiredProp);\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"\r",
									"        let schemaPropertyExceptions = [];\r",
									"        if (pm.environment.has('env-schemaPropertyExceptions')) {\r",
									"            schemaPropertyExceptions = JSON.parse(pm.environment.get('env-schemaPropertyExceptions'));\r",
									"        }\r",
									"\r",
									"        for (let prop in object.properties) {\r",
									"            const property = object.properties[prop];\r",
									"\r",
									"            if (!schemaPropertyExceptions.some(pe => pe === prop)) {\r",
									"                pm.test(`Schema property '${objectName}.${prop}' is lowercase`, function () {\r",
									"                    pm.expect(prop.charAt(0)).to.equal(prop.charAt(0).toLowerCase());\r",
									"                });\r",
									"            }\r",
									"\r",
									"            if (property.type && property.type.toLowerCase() == 'object') {\r",
									"                testSchemaObject(schema, property, `${objectName}.${prop}`);\r",
									"            }\r",
									"            else if (property.type && property.type.toLowerCase() == 'array') {\r",
									"                testSchemaObject(schema, property, `${objectName}.${prop}(list)`);\r",
									"            }\r",
									"            else if (property.oneOf) {\r",
									"                _.forEach(property.oneOf, (oneOf, i) => {\r",
									"                    testSchemaObject(schema, oneOf, `${objectName}.${prop}(oneOf).${i}`)\r",
									"                });\r",
									"            }\r",
									"            else if (property.allOf) {\r",
									"                _.forEach(property.allOf, (allOf, i) => {\r",
									"                    testSchemaObject(schema, allOf, `${objectName}.${prop}(allOf).${i}`)\r",
									"                });\r",
									"            }\r",
									"            else if (property.anyOf) {\r",
									"                _.forEach(property.anyOf, (anyOf, i) => {\r",
									"                    testSchemaObject(schema, anyOf, `${objectName}.${prop}(anyOf).${i}`)\r",
									"                });\r",
									"            }\r",
									"            else {\r",
									"                if (requireParamDescription && !property.$ref) {\r",
									"                    pm.test(`Schema property '${objectName}.${prop}' has a description between ${paramDescriptionMinLength} and ${paramDescriptionMaxLength} characters`, function () {\r",
									"                        pm.expect(property).to.have.property('description').and.to.be.a('string');\r",
									"                        pm.expect(property.description.length).to.be.at.least(paramDescriptionMinLength);\r",
									"                        pm.expect(property.description.length).to.be.at.most(paramDescriptionMaxLength);\r",
									"                    });\r",
									"\r",
									"                    if (property.description) {\r",
									"                        pm.test(`Schema property '${objectName}.${prop}' description is not just the name`, function () {\r",
									"                            pm.expect(prop.toLowerCase()).to.not.equal(property.description.toLowerCase());\r",
									"                        });\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                if (requireParamExample && !property.$ref) {\r",
									"                    pm.test(`Schema property '${objectName}.${prop}' has an example`, function () {\r",
									"                        pm.expect(property).to.have.property('example');\r",
									"                    });\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"    else if (object.type && object.type.toLowerCase() == 'array') {\r",
									"        pm.test(`Schema '${objectName}' has items defined`, function () {\r",
									"            pm.expect(object).to.have.property('items');\r",
									"        });\r",
									"\r",
									"        testSchemaObject(schema, object.items, `${objectName}.list`);\r",
									"    }\r",
									"    else if (object.oneOf) {\r",
									"        handleSchemaArray(schema, object, objectName, 'oneOf');\r",
									"    } else if (object.allOf) {\r",
									"        handleSchemaArray(schema, object, objectName, 'allOf');\r",
									"    }\r",
									"    else if (object.anyOf) {\r",
									"        handleSchemaArray(schema, object, objectName, 'anyOf');\r",
									"    }\r",
									"    else if (object.$ref) {\r",
									"        const name = getName(object.$ref);\r",
									"        const testedRef = testedSchemaRefs.find(tsr => tsr == name);\r",
									"        if (!testedRef) {\r",
									"            testSchemaObject(schema, schema.components.schemas[name], objectName);\r",
									"            testedSchemaRefs.push(name);\r",
									"        }\r",
									"    }\r",
									"    else {\r",
									"        pm.test(`Schema '${objectName}' has a declared type`, function () {\r",
									"            pm.expect(object).to.have.property('type');\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"function handleSchemaArray(schema, object, objectName, arrayType) {\r",
									"    for (let i = 0; i < object[arrayType].length; i++) {\r",
									"        const arraySchema = object[arrayType][i];\r",
									"        if (arraySchema.$ref) {\r",
									"            const name = getName(arraySchema.$ref);\r",
									"            const testedRef = testedSchemaRefs.find(tsr => tsr == name);\r",
									"            if (!testedRef) {\r",
									"                testSchemaObject(schema, schema.components.schemas[name], `${objectName}[${i}](ref ${name})`);\r",
									"                testedSchemaRefs.push(name);\r",
									"            }\r",
									"        }\r",
									"        else {\r",
									"            testSchemaObject(schema, arraySchema, `${objectName}[${i}]`);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getName(ref) {\r",
									"    let pieces = ref.split('/');\r",
									"    return pieces[pieces.length - 1];\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"id": "bc6477c2-13e9-4a23-8539-84e5d203427a"
							}
						}
					],
					"id": "98376f86-46de-477b-8bf1-e8b34f3ce125",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"id": "d7844b8d-d197-4d8c-858a-affd02137db9"
		},
		{
			"name": "Contract Tests",
			"item": [
				{
					"name": "Build Schema Tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2e89fc5-99af-465d-bb7d-113d7b69b296",
								"exec": [
									"const schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"\r",
									"let schemaTests = [];    \r",
									"for(let prop in schema.paths){\r",
									"    const pathName = prop;    \r",
									"    let path = {\r",
									"        path: `${pm.collectionVariables.get('coll-baseUrl')}${pathName}`,\r",
									"        parameters: schema.paths[prop].parameters,        \r",
									"    };\r",
									"\r",
									"    for(let method in schema.paths[prop]){\r",
									"        if(method.toLowerCase() == 'parameters' || isMockEndpoint(schema.paths[prop][method])){\r",
									"            continue;\r",
									"        }       \r",
									"\r",
									"        let currentPath = _.cloneDeep(path);\r",
									"        currentPath.method = method.toUpperCase(); \r",
									"        let pathMethod = schema.paths[prop][method];\r",
									"        let securityExtension = pm.environment.get('env-securityExtensionName');        \r",
									"        if(securityExtension && pathMethod[securityExtension] && pathMethod[securityExtension].length > 0){\r",
									"            currentPath.allowedRole = pathMethod[securityExtension][0];\r",
									"        }\r",
									"\r",
									"        if(pathMethod.parameters && pathMethod.parameters.length > 0) {\r",
									"            if(currentPath.parameters) {\r",
									"                currentPath.parameters = pathMethod.parameters.concat(pathMethod.parameters,currentPath.parameters);\r",
									"            } else {\r",
									"                currentPath.parameters = pathMethod.parameters;\r",
									"            }\r",
									"        }\r",
									"\r",
									"        const expectedResponses = getExpectedResponses(pathMethod);\r",
									"        currentPath.responses = expectedResponses;\r",
									"\r",
									"        if(pathMethod.requestBody){\r",
									"            let bodyModel;\r",
									"            if(pathMethod.requestBody.content['application/json']) {\r",
									"                if(pathMethod.requestBody.content['application/json'].schema && pathMethod.requestBody.content['application/json'].schema.$ref){\r",
									"                    bodyModel = getSchemaReference(schema, pathMethod.requestBody.content['application/json'].schema.$ref);\r",
									"                } else {\r",
									"                    bodyModel = pathMethod.requestBody.content['application/json'].schema;\r",
									"                }\r",
									"            } else {\r",
									"                continue;\r",
									"            }\r",
									"            \r",
									"            const models = buildModels(schema, bodyModel);\r",
									"            const mutations = buildModelMutations(models);\r",
									"\r",
									"            mutations.forEach((mutation) => {\r",
									"                let schemaTest = _.cloneDeep(currentPath);\r",
									"                Object.assign(schemaTest, mutation);\r",
									"                schemaTest.name = `${schemaTest.method} - ${pathName} - ${schemaTest.description} - SUCCESS: ${schemaTest.success}`;\r",
									"                schemaTests.push(schemaTest);\r",
									"            });\r",
									"        }        \r",
									"        else {\r",
									"            currentPath.name = `${currentPath.method} - ${pathName} - No Request Body - SUCCESS: true`;\r",
									"            currentPath.success = true;\r",
									"            schemaTests.push(currentPath);\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set('coll-schemaTests', JSON.stringify(schemaTests));\r",
									"\r",
									"//\r",
									"// Supporting Methods Below\r",
									"//\r",
									"function buildModels(schema, object){\r",
									"  let models = [];\r",
									"\r",
									"  if(object['$ref']){\r",
									"    object = getSchemaReference(schema, object['$ref']);\r",
									"  }\r",
									"  \r",
									"  if(object.type && object.type.toLowerCase() == 'object'){\r",
									"    if(object.required && object.required.length > 0){ \r",
									"      models.push({});\r",
									"      _.forEach(object.required, function(param){\r",
									"        const property = object.properties[param];\r",
									"        \r",
									"        if(property.type && ['string', 'number', 'integer', 'boolean'].includes(property.type.toLowerCase())){\r",
									"          for(let modelIndex = 0; modelIndex < models.length; modelIndex++){\r",
									"            let model = models[modelIndex];\r",
									"            model[param] = property.example;\r",
									"          }\r",
									"        }\r",
									"        else {\r",
									"          const nestedObjects = buildModels(schema, property);          \r",
									"          models = addToModels(models, nestedObjects, param);\r",
									"        }                  \r",
									"      });\r",
									"    }\r",
									"  }\r",
									"  else if(object.type && object.type.toLowerCase() == 'array'){    \r",
									"    let items = buildModels(schema, object.items);\r",
									"    if(Array.isArray(items)){\r",
									"      for(let i = 0; i < items.length; i++){\r",
									"        models.push([items[i]]);\r",
									"      }      \r",
									"    }\r",
									"    else {\r",
									"      models.push([items]);\r",
									"    }\r",
									"  }\r",
									"  else if (object.oneOf){  \r",
									"    _.forEach(object.oneOf, function(component){\r",
									"        let items = buildModels(schema, component);        \r",
									"      models = models.concat(items);\r",
									"    });    \r",
									"  }\r",
									"  else if (object.allOf){\r",
									"    let pieces = [{}];\r",
									"    _.forEach(object.allOf, function(component){\r",
									"        let componentModels = buildModels(schema, component);\r",
									"        pieces = addToModels(pieces, componentModels);        \r",
									"    });\r",
									"    \r",
									"    models = pieces;\r",
									"  }\r",
									"  else if (object.anyOf){\r",
									"      let pieces = [];\r",
									"      let combinedPieces = [{}];\r",
									"      _.forEach(object.anyOf, function(component){\r",
									"        let componentModels = buildModels(schema, component);\r",
									"        combinedPieces = addToModels(combinedPieces, componentModels);\r",
									"        pieces = pieces.concat(componentModels);\r",
									"      });\r",
									"\r",
									"      models = pieces.concat(combinedPieces);\r",
									"  }\r",
									"  else {\r",
									"    // All other options are primitive values\r",
									"    return object.example;\r",
									"  }\r",
									"  return models;\r",
									"}\r",
									"\r",
									"function getSchemaReference(schema, referenceName){  \r",
									"  const refPieces = referenceName.split('/');\r",
									"  let reference = schema;\r",
									"  for(let i = 1; i < refPieces.length; i++){\r",
									"    reference = reference[refPieces[i]];\r",
									"  }\r",
									"\r",
									"  return reference;  \r",
									"}\r",
									"\r",
									"function addToModels(models, newPieces, name){\r",
									"  let newModels = [];\r",
									"  _.forEach(models, function(model){\r",
									"    _.forEach(newPieces, function(newPiece){\r",
									"      let newModel = _.cloneDeep(model);\r",
									"      if(name){\r",
									"        newModel[name] = newPiece;\r",
									"      }\r",
									"      else {\r",
									"        Object.assign(newModel, newPiece);\r",
									"      }\r",
									"      newModels.push(newModel);\r",
									"    });\r",
									"  });\r",
									"\r",
									"  return newModels;\r",
									"}\r",
									"\r",
									"function buildModelMutations(models){\r",
									"  console.log(\"Building model mutations ...\")    \r",
									"  let modelMutations = [];\r",
									"  _.forEach(models, function(model){  \r",
									"    addMutation(true, 'Has all required fields', model, modelMutations);\r",
									"    let mutations = buildMutation(model);\r",
									"    modelMutations = modelMutations.concat(mutations);\r",
									"  });\r",
									"\r",
									"  return modelMutations;\r",
									"}\r",
									"\r",
									"function buildMutation(model){\r",
									"  let mutations = [];\r",
									"  console.log(model)  \r",
									"\r",
									"  for(const [key, value] of Object.entries(model)){\r",
									"    console.log(`key: ${key}, value: ${value}`)\r",
									"    if(typeof value == 'object'){          \r",
									"      let nestedMutations = buildMutation(value);\r",
									"      nestedMutations.forEach((nestedMutation) => {\r",
									"        let mutation = _.cloneDeep(model);\r",
									"        mutation[key] = nestedMutation.body;\r",
									"        addMutation(false, `${nestedMutation.description} in ${key} object`, mutation, mutations);\r",
									"      });\r",
									"      \r",
									"      let mutation = _.cloneDeep(model);\r",
									"      delete mutation[key];\r",
									"      addMutation(false, `Missing ${key} object`, mutation, mutations);\r",
									"\r",
									"      let emptyMutation = _.cloneDeep(model);\r",
									"      emptyMutation[key] = {};\r",
									"      addMutation(false, `Empty ${key} object`, emptyMutation, mutations);\r",
									"    }\r",
									"    else {\r",
									"      if(Array.isArray(value)){\r",
									"        console.log('probably an error');\r",
									"      }\r",
									"      let mutation = _.cloneDeep(model);\r",
									"      delete mutation[key];\r",
									"      addMutation(false, `Missing ${key} property`, mutation, mutations);\r",
									"\r",
									"      let blankMutation = _.cloneDeep(model);\r",
									"      blankMutation[key] = '';\r",
									"      addMutation(false, `Blank ${key} property`, blankMutation, mutations);\r",
									"    }\r",
									"  }\r",
									"\r",
									"  return mutations;\r",
									"}\r",
									"\r",
									"function addMutation(isSuccess, description, mutation, mutations){\r",
									"  mutations.push({\r",
									"    success: isSuccess, \r",
									"    description: description,\r",
									"    body: mutation\r",
									"  });\r",
									"}\r",
									"\r",
									"function getExpectedResponses(pathMethod){\r",
									"    const responses = [];\r",
									"        for(const [statusCode, value] of Object.entries(pathMethod.responses)){\r",
									"            let response = {\r",
									"                statusCode: Number(statusCode)\r",
									"            };\r",
									"\r",
									"            if(value['x-postman-variables'] && Array.isArray(value['x-postman-variables'])){\r",
									"                response.variables = value['x-postman-variables'].filter(variable => variable.type.toLowerCase() === 'save');\r",
									"            }\r",
									"\r",
									"            if(value.$ref){\r",
									"                response.$ref = value.$ref;                \r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                if(value.content && value.content['application/json'] && value.content['application/json'].schema){\r",
									"                    if(value.content['application/json'].schema.$ref){\r",
									"                       response.$ref = value.content['application/json'].schema.$ref;                        \r",
									"                    }\r",
									"                    else {\r",
									"                       response.schema = value.content['application/json'].schema;\r",
									"                    }\r",
									"                }\r",
									"            }            \r",
									"\r",
									"            responses.push(response);\r",
									"        }\r",
									"    return responses;\r",
									"}\r",
									"\r",
									"function isMockEndpoint(pathMethod){\r",
									"    let isMock = false;\r",
									"    if(pathMethod && pathMethod['x-amazon-apigateway-integration'] && pathMethod['x-amazon-apigateway-integration'].type \r",
									"        && pathMethod['x-amazon-apigateway-integration'].type.toLowerCase() == 'mock') {\r",
									"        isMock = true;\r",
									"    }\r",
									"\r",
									"    return isMock;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "488c2197-9230-4619-8c17-bd37c4624653",
								"exec": [
									"let schemaTests = pm.collectionVariables.get('coll-schemaTests');\r",
									"if(schemaTests){\r",
									"    schemaTests = JSON.parse(schemaTests);\r",
									"    if(!schemaTests || !schemaTests.length){\r",
									"        postman.setNextRequest('More APIs to Process?');\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62111492-6756-4062-81fb-8036d8f5b395",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "47562e51-f681-414c-aea2-de1ecdfab34f",
								"exec": [
									"const url = require('url');\r",
									"\r",
									"const schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"let schemaTests = JSON.parse(pm.collectionVariables.get('coll-schemaTests'));\r",
									"\r",
									"const schemaTest = schemaTests.shift();\r",
									"pm.collectionVariables.set('coll-schemaTests', JSON.stringify(schemaTests));\r",
									"pm.variables.set('currentSchemaTest', JSON.stringify(schemaTest));\r",
									"\r",
									"const path = replacePathParameters(schema, schemaTest.path, schemaTest.parameters);\r",
									"pm.request.url.update(path);\r",
									"delete pm.request.url.auth;\r",
									"delete pm.request.url.port;\r",
									"delete pm.request.url.hash;\r",
									"pm.request.url.protocol = pm.request.url.protocol.replace(/\\:$/, '');\r",
									"pm.request.method = schemaTest.method;\r",
									"pm.request.name = schemaTest.name;\r",
									"\r",
									"pm.variables.set('requestName', schemaTest.name);\r",
									"pm.variables.set('body', JSON.stringify(schemaTest.body));\r",
									"\r",
									"// Add top level parameters from the path\r",
									"const roleHeaderName = pm.environment.get('env-roleHeaderName');\r",
									"\r",
									"if(schemaTest.parameters){\r",
									"    for(let i = 0; i < schemaTest.parameters.length; i++){\r",
									"        let param = schemaTest.parameters[i];\r",
									"        if (param.$ref) {\r",
									"            let pieces = param.$ref.split('/');\r",
									"            const name = pieces[pieces.length-1];\r",
									"            const schemaParam = schema.components.parameters[name];\r",
									"            const paramType = schemaParam.in.toLowerCase();\r",
									"            const paramValue = loadParameterValue(schemaParam);\r",
									"            if(paramType == 'header'){\r",
									"                if(roleHeaderName && schemaParam.name.toLowerCase() == roleHeaderName.toLowerCase()){\r",
									"                    pm.request.headers.upsert({ key: schemaParam.name, value: schemaTest.allowedRole });    \r",
									"                } \r",
									"                else {\r",
									"                    pm.request.headers.upsert({ key: schemaParam.name, value: paramValue });\r",
									"                }\r",
									"            } else if (paramType == 'query' && schemaParam.required == true) {\r",
									"                pm.request.url.query.upsert({ key: schemaParam.name, value: paramValue });\r",
									"            }\r",
									"        } else {\r",
									"            const paramType = param.in.toLowerCase();\r",
									"            const paramValue = loadParameterValue(param);\r",
									"            if (paramType == 'header') {\r",
									"                pm.request.headers.upsert({ key: param.name, value: paramValue });\r",
									"            } else if (paramType == 'query' && param.required == true) {\r",
									"                pm.request.url.query.upsert({ key: param.name, value: paramValue });\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function loadParameterValue(parameter){\r",
									"    let parameterValue;\r",
									"    if(parameter['x-postman-variables']){\r",
									"        let variable = parameter['x-postman-variables'].find(v => v.type.toLowerCase() === 'load');\r",
									"        if(variable && pm.collectionVariables.has(variable.name)){\r",
									"            parameterValue = pm.collectionVariables.get(variable.name);\r",
									"        }\r",
									"        else {\r",
									"            parameterValue = encodeURIComponent(parameter.schema.example ? parameter.schema.example : parameter.example);    \r",
									"        }\r",
									"    }\r",
									"    else {\r",
									"        parameterValue = encodeURIComponent(parameter.schema.example ? parameter.schema.example : parameter.example);\r",
									"    }\r",
									"\r",
									"    return parameterValue;\r",
									"}\r",
									"\r",
									"function replacePathParameters(schema, pathName, parameters){\r",
									"    let replacedPathName = pathName;\r",
									"    let pathVariableRegex = /{([^}]*)}/g;\r",
									"    let matches = pathName.match(pathVariableRegex);\r",
									"    _.forEach(matches, function(match){\r",
									"        let paramName = match.substring(1, match.length - 1);\r",
									"        _.forEach(parameters, function(param){\r",
									"            if(param.$ref){\r",
									"                let parameter = getSchemaReference(schema, param.$ref);                \r",
									"                if (parameter.in && parameter.in.toLowerCase() == 'path' && parameter.name && parameter.name == paramName){\r",
									"                    let parameterValue = loadParameterValue(parameter);\r",
									"                    replacedPathName = replacedPathName.replace(match, parameterValue);\r",
									"                    return false;\r",
									"                }\r",
									"            } else {\r",
									"                if (param.in && param.in.toLowerCase() == 'path' && param.name && param.name == paramName) {\r",
									"                    let parameterValue = loadParameterValue(param);\r",
									"                    replacedPathName = replacedPathName.replace(match, parameterValue);\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"        });    \r",
									"    });\r",
									"\r",
									"    return url.parse(replacedPathName);\r",
									"}\r",
									"\r",
									"function getSchemaReference(schema, referenceName){  \r",
									"  const refPieces = referenceName.split('/');\r",
									"  let reference = schema;\r",
									"  for(let i = 1; i < refPieces.length; i++){\r",
									"    reference = reference[refPieces[i]];\r",
									"  }\r",
									"\r",
									"  return reference;  \r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b712f79-6e4f-43ef-b6c6-dd863a873012",
								"exec": [
									"const schemaTests = JSON.parse(pm.collectionVariables.get('coll-schemaTests'));\r",
									"if(schemaTests.length > 0){\r",
									"    postman.setNextRequest('Test Request');\r",
									"}\r",
									"\r",
									"const schemaTest = JSON.parse(pm.variables.get('currentSchemaTest'));\r",
									"\r",
									"pm.test(`${schemaTest.name} - Has expected status code`, function () {\r",
									"    if(schemaTest.success){\r",
									"        pm.expect(pm.response.code).to.not.equal(400);\r",
									"    }\r",
									"    else {\r",
									"        pm.response.to.have.status(400);\r",
									"    }    \r",
									"});\r",
									"\r",
									"\r",
									"const expectedResponse = schemaTest.responses.find(r => r.statusCode == pm.response.code);\r",
									"pm.test(`${schemaTest.name} - Status code is allowed`, function(){\r",
									"    pm.expect(expectedResponse).to.exist;\r",
									"});\r",
									"\r",
									"if(expectedResponse){\r",
									"    pm.test(`${schemaTest.name} - Has expected response body schema`, function(){\r",
									"        const Ajv = require('ajv');\r",
									"        const ajv = new Ajv({allErrors: true,format: false});\r",
									"        \r",
									"        if(pm.response.code == 204 || shouldResponseBeEmpty(expectedResponse)){\r",
									"            checkForEmptyResponse();\r",
									"        }\r",
									"        else if(expectedResponse.$ref){            \r",
									"            const jsonData = pm.response.json();\r",
									"            const schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"            ajv.addSchema(schema, 'OAS');\r",
									"            \r",
									"            const valid = ajv.validate({$ref: `OAS${expectedResponse.$ref}`}, jsonData);\r",
									"            const errors = ajv.errorsText(valid.errors);\r",
									"            pm.expect(errors).to.equal('No errors');\r",
									"            if(errors !== 'No errors'){\r",
									"                console.log(errors);\r",
									"            }\r",
									"        }\r",
									"        else if(expectedResponse.schema){\r",
									"            const jsonData = pm.response.json();\r",
									"            const validate = ajv.compile(expectedResponse.schema);\r",
									"            const valid = validate(jsonData);\r",
									"            const errors = ajv.errorsText(valid.errors);\r",
									"            pm.expect(errors).to.equal('No errors');\r",
									"            if(errors !== 'No errors'){\r",
									"                console.log(errors);\r",
									"            }\r",
									"        }\r",
									"        else {\r",
									"            checkForEmptyResponse();\r",
									"        }\r",
									"\r",
									"        if(expectedResponse.variables){\r",
									"            const jsonData = pm.response.json();\r",
									"            _.forEach(expectedResponse.variables, function(variable){\r",
									"                let pathPieces = variable.path.split('.').filter(piece => piece);\r",
									"                let data = jsonData;\r",
									"                let found = true;\r",
									"                _.forEach(pathPieces, function(piece){\r",
									"                    if(data[piece]){\r",
									"                        data = data[piece];\r",
									"                    }\r",
									"                    else {\r",
									"                        found = false;\r",
									"                    }\r",
									"                });\r",
									"\r",
									"                if(found){\r",
									"                    pm.collectionVariables.set(variable.name, data);\r",
									"                }\r",
									"                else {\r",
									"                    pm.test(`Unable to save dynamic variable ${variable.name} at the provided path.`, function() {\r",
									"                        pm.expect(true).to.equal(variable.path);\r",
									"                    });\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"function checkForEmptyResponse() {\r",
									"    let emptyBody = true;\r",
									"    if(pm.response.text()){\r",
									"        emptyBody = false; \r",
									"    }\r",
									"\r",
									"    pm.expect(emptyBody).to.be.true;\r",
									"}\r",
									"\r",
									"function shouldResponseBeEmpty(expectedResponse){\r",
									"    let responseSchema = expectedResponse.schema;\r",
									"    if(expectedResponse.$ref){\r",
									"        let schema = JSON.parse(pm.collectionVariables.get('coll-schema'));\r",
									"        responseSchema = getSchemaReference(schema, expectedResponse.$ref);\r",
									"        if(expectedResponse.$ref.startsWith('#/components/responses')){\r",
									"            return (!responseSchema || !responseSchema.content || !responseSchema.content['application/json'] \r",
									"                || !responseSchema.content['application/json'].schema || Object.keys(responseSchema.content['application/json'].schema).length == 0);\r",
									"        } else {\r",
									"            return false;\r",
									"        }\r",
									"    }\r",
									"    else {\r",
									"        return (Object.keys(responseSchema).length == 0);\r",
									"    }\r",
									"}\r",
									"\r",
									"function getSchemaReference(schema, referenceName){  \r",
									"  const refPieces = referenceName.split('/');\r",
									"  let reference = schema;\r",
									"  for(let i = 1; i < refPieces.length; i++){\r",
									"    reference = reference[refPieces[i]];\r",
									"  }\r",
									"\r",
									"  return reference;  \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b5b5a940-7661-4b8f-b758-ce3aa6580d32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			],
			"id": "f6b2c91e-e3b9-4a91-9f9c-1ce12b41de5f"
		},
		{
			"name": "Finalize",
			"item": [
				{
					"name": "More APIs to Process?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let apis = pm.collectionVariables.get('coll-apiIds');\r",
									"if(apis){\r",
									"    try{\r",
									"        apis = JSON.parse(apis);\r",
									"        if(apis.length > 0){\r",
									"            postman.setNextRequest('Get Current API Version');\r",
									"        }\r",
									"    }\r",
									"    catch(err){}    \r",
									"}"
								],
								"type": "text/javascript",
								"id": "328f9c44-c3e3-4027-9cae-6600a1916440"
							}
						}
					],
					"id": "bccb82ae-23f9-4f8c-9296-05ec9cfe9edd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Test Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// See https://blog.postman.com/2019/05/28/pro-tip-dynamically-unset-postman-environment-variables/\r",
									"// for more details on what we're doing here. \r",
									"\r",
									"cleanupCollectionVariables();\r",
									"\r",
									"function cleanupCollectionVariables() {\r",
									"    const clean = _.keys(pm.collectionVariables.toObject());\r",
									"\r",
									"    _.each(clean, (arrItem) => {\r",
									"        pm.collectionVariables.unset(arrItem);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"id": "4bce52be-934f-40c7-8390-62d43f3188e2"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d500f94a-74dc-45ce-a698-fc28d19739d4"
							}
						}
					],
					"id": "923f4c73-f500-448b-b569-12944228bdc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/delay/0",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"delay",
								"0"
							]
						}
					},
					"response": []
				}
			],
			"id": "3fa11f93-6407-45dc-8fd5-a7e42a2ae9e1"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{OpenAIToken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a5cbc587-50f4-4ba5-afc4-2f1dcc3c90f1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "594d3a16-d8e4-475d-9fe1-1eefeaa75f60",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}